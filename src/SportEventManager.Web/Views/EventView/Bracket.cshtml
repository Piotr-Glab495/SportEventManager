@using SportEventManager.Web.ViewModels.EventModel;
@model EventViewModel

@{
    ViewData["Title"] = "Bracket";
    Layout = "~/Views/EventView/_EventViewLayout.cshtml";
}

@{
    int numTeams = Model.Teams.Count;
    int numRounds = (int)Math.Log(numTeams, 2);
}

<div class="tournament-headers">
    @for (int i = numRounds; i > 0; i--)
    {
        switch (i)
        {
            case 3:
                <h3>Quater-Finals</h3>
                break;
            case 2:
                <h3>Semi-Finals </h3>
                break;
            case 1:
                <h3>Final</h3>
                break;
            default:
                <h3>Round of @(Math.Pow(2, i))</h3>
                break;
        }
    }
</div>

@for (int i = 0; i < numRounds; i++)
{
    <div class="round r-of-@(numTeams / Math.Pow(2, i))">
        @for (int j = 0; j < numTeams / Math.Pow(2, i); j++)
        {
            <div class="bracket-game">
                <div class="player top">
                    Team @(j + 1)
                    <div class="score">
                        3
                    </div>
                </div>
                <div class="player bot">
                    Team @(j + 1 + numTeams / Math.Pow(2, i))
                    <div class="score">
                        1
                    </div>
                </div>
            </div>
        }
    </div>
    @if (i < numRounds - 1)
    {
        <div class="connectors r-of-@(numTeams / Math.Pow(2, i + 1))">
            @for (int j = 0; j < numTeams / Math.Pow(2, i + 1); j++)
            {
                <div class="top-line"></div>
                <div class="clear"></div>
                <div class="bottom-line"></div>
                <div class="clear"></div>
            }
            <div class="vert-line"></div>
            <div class="clear"></div>
            <div class="next-line"></div>
            <div class="clear"></div>
        </div>
    }
}
