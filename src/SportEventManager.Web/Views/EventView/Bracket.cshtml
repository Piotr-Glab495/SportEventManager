@using SportEventManager.Web.ViewModels.EventModel;
@using SportEventManager.Web.ViewModels.MatchModel;

@model EventViewModel

@{
    ViewData["Title"] = "Bracket";
    Layout = "~/Views/EventView/_EventViewLayout.cshtml";
}

@{
    int startNumberMatches = Model.Matches.Count;
    string[] roundNames = new string[] { "Round of 16", "Round of 8", "Quarter-Finals", "Semi-Finals", "Final" };
    List<MatchViewModel> Matches = Model.Matches.OrderBy(m => m.StartTime).ToList();
    int iterationTeam = 0;

    
    int numRounds = (int)Math.Log(startNumberMatches, 2);
}

<div class="tournament-headers">
    @for (int i = 0; i <= numRounds; i++)
    {
        <div class="round @(i > 0 ? $"round-{i}" : "")">
            <h3>@roundNames[(roundNames.Length - 1) - numRounds + i]</h3>
            @for (int j = 0; j < startNumberMatches; j++ )
            {
                <div class="matchPair">
                    <div class="matchTable">
                        <div class="team-nameTable">@((iterationTeam <= startNumberMatches) ? Matches[iterationTeam].HomeTeam.Name : "Oczekujący")</div>
                        <div class="team-scoreTable">0</div>
                    </div>
                    <div class="matchTable">
                        <div class="team-nameTable">@((iterationTeam <= startNumberMatches) ? Matches[iterationTeam].GuestTeam.Name : "Oczekujący")</div>
                        <div class="team-scoreTable">0</div>
                    </div>
                </div>
                iterationTeam++;
            }
            @{
                
                startNumberMatches /= 2;
            }
        </div>
    }
</div>
