@using SportEventManager.Web.ViewModels.EventModel;
@model IEnumerable<EventViewModel>
@{
    ViewData["Title"] = "Home Page";
}

<style>
    .row > .column {
        padding: 0 8px;
        margin-bottom: 20px;
    }

    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    /* Create four equal columns that floats next to eachother */
    .column {
        float: left;
        width: 30%;
        margin-left: 15px;
    }

    /* The Modal (background) */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.8);
    }

    /* Modal Content */
    .modal-content {
        position: relative;
        background-color: #002b36;
        margin: auto;
        padding: 0;
        width: 90%;
        max-width: 1200px;
    }

    /* Modal Header */
    .modal-header {
        padding: 2px 16px;
        background-color: rgba(7, 54, 66);
        color: white;
    }

    /* Modal Body */
    .modal-body {
        padding: 2px 16px;
    }

    /* Modal Footer */
    .modal-footer {
        padding: 2px 16px;
        background-color: rgba(7, 54, 66);
        float: inherit;
    }

    /* The Close Button */
    .close {
        color: white;
        position: absolute;
        top: 10px;
        right: 25px;
        font-size: 35px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #999;
            text-decoration: none;
            cursor: pointer;
        }

    .match {
        transition: 0.3s;
        border: 1px solid #AAA;
        border-radius: 15px 15px 15px 15px;
    }

    .round {
        min-width: 300px;
        padding-left: 10px;
        font-size: 24px;
    }

        .round .date {
            display: inline;
            float: right;
            padding-left: 10px;
            margin-right: 10px;
        }

    .match:hover {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        background-color: rgba(0, 0, 0, 0.3);
        cursor: pointer;
    }

    .team {
        min-width: 100px;
        padding-left: 10px;
    }

        .team.top {
            border-radius: 15px 15px 0 0;
            font-size: 20px;
        }

        .team.bot {
            border-radius: 0 0 15px 15px;
            font-size: 20px;
        }

        .team .score {
            display: inline;
            float: right;
            padding-left: 10px;
            padding-right: 10px;
            font-size: 20px;
        }


    .inTeam1 {
        display: inline;
        float: left;
        margin-left: 100px;
        font-size: 30px;
    }

    .inTeam2 {
        display: inline;
        float: right;
        margin-right: 100px;
        font-size: 30px;
    }

    .inTeam1 .score {
        display: inline;
        float: right;
        margin-left: 182px;
    }

    .inTeam2 .score {
        display: inline;
        float: left;
        margin-right: 182px;
    }

    * {
        box-sizing: border-box;
    }

    .modal-body .row {
    }

    .modal-body .column {
        width: 33.33333333%;
        padding: 5px;
    }


    .stat1 {
        text-align: center;
        margin-left: 372px;
        font-size: 20px;
    }

    .statName {
        text-align: center;
    }

    .stat2 {
        text-align: center;
        margin-right: 372px;
        font-size: 20px;
    }

    .addstat1 {
        text-align: center;
        font-size: 20px;
    }

    .addstat2 {
        text-align: center;
        font-size: 20px;
    }

    .modal-footer .btn {
        border: 2px solid black;
        border-radius: 5px;
        background-color: white;
        color: black;
        padding: 14px 28px;
        font-size: 16px;
        cursor: pointer;
    }

    .default {
        border-color: #e7e7e7;
        color: black;
    }

        .default:hover {
            background: #e7e7e7;
        }

</style>

@if(Model != null)
{
    @for (int i = 0; i < Model.Count<EventViewModel>() ; i++)
    {
        int currentId = Model.ElementAt<EventViewModel>(i).Id;
        <div class="column">
            <a asp-action="EventView/Matches" asp-route-id="@currentId">
            <div onclick="changeAddress(@currentId)" class="match" id="matchDiv_@currentId">
                    <div class="round">
                        @Html.DisplayFor(modelItem => Model.ElementAt<EventViewModel>(i).Name)
                        <div class="date">
                            @Html.DisplayFor(modelItem => Model.ElementAt<EventViewModel>(i).startTime)
                        </div>
                    </div>
                    <div class="team top">
                        Number of teams
                        <div class="score">
                            @Html.DisplayFor(modelItem => Model.ElementAt<EventViewModel>(i).Teams.Count)
                        </div>
                    </div>
                    <div class="team top">
                        Number of Stadiums
                        <div class="score">
                            @Html.DisplayFor(modelItem => Model.ElementAt<EventViewModel>(i).Stadiums.Count)
                        </div>
                    </div>
                    <div class="team bot">
                        Number of Matches
                        <div class="score">
                            @Html.DisplayFor(modelItem => Model.ElementAt<EventViewModel>(i).Matches.Count)
                        </div>
                    </div>
                </div>
            </a>
        </div>
    }
}

@section Scripts {
    <script type="text/javascript">
        function changeAddress(int id) {
                string currentAddress = window.location.href;
            if (!currentAddress.slice(-1) == "/") {
                currentAddress += "/";
            }
            window.location.replace(currentAddress + "EventView/Matches/" + id.toString());
        }
    </script>
}
